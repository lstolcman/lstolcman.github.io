<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on lstolcman Today-I-Learned</title><link>https://lstolcman.github.io/tags/python/</link><description>Recent content in Python on lstolcman Today-I-Learned</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 12 Feb 2024 23:07:00 +0200</lastBuildDate><atom:link href="https://lstolcman.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Cache'em all! - speeding up apt and other downloads in (not only) docker containers (2024 version)</title><link>https://lstolcman.github.io/post/cache-em-all-speed-up-apt-pip-docker/</link><pubDate>Mon, 12 Feb 2024 23:07:00 +0200</pubDate><guid>https://lstolcman.github.io/post/cache-em-all-speed-up-apt-pip-docker/</guid><description>&lt;p>When working on couple of &lt;del>Dockerfiles&lt;/del>Containerfiles, I was having a situation when I had to clear
&lt;del>docker&lt;/del>podman cache (for various reasons), and the indispensable step is to update or download certain
packages from apt. It is often long process, and I was thinking whether there&amp;rsquo;s a way to speed it up or
optimize.&lt;/p>
&lt;p>The results of the investigation are below:&lt;/p>
&lt;h1 id="caching-apt-get-downloads">Caching apt get downloads&lt;/h1>
&lt;p>There are two options of caching:&lt;/p></description></item><item><title>Configuring mypy</title><link>https://lstolcman.github.io/post/configuring-mypy/</link><pubDate>Fri, 18 Feb 2022 20:11:00 +0200</pubDate><guid>https://lstolcman.github.io/post/configuring-mypy/</guid><description>&lt;p>Mypy does not have strict settings by default. It has to have a config, to do a proper type checking:&lt;/p>
&lt;p>Good:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/">Professional-grade mypy configuration - Wolt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://quantlane.com/blog/type-checking-large-codebase/">How to start type-checking a large Python codebase&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Other:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://breadcrumbscollector.tech/mypy-how-to-use-it-in-my-project/">mypy: how to use it in my project?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://av.tib.eu/media/44935">Europython 2018: Getting Started with Mypy and Type Checking&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Installation speed of multiple python packages using pip</title><link>https://lstolcman.github.io/post/pip-multiple-packages/</link><pubDate>Tue, 15 Feb 2022 12:11:00 +0200</pubDate><guid>https://lstolcman.github.io/post/pip-multiple-packages/</guid><description>&lt;p>What&amp;rsquo;s faster - multiple &lt;code>pip install&lt;/code> statements, or one with a list of wanted libraries? Lets do a quick check:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>➜ test cat 1.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install &lt;span style="color:#e6db74">&amp;#34;pytest&amp;gt;=7.0,&amp;lt;7.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install &lt;span style="color:#e6db74">&amp;#34;pytest-mock&amp;gt;=3.7,&amp;lt;3.8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install &lt;span style="color:#e6db74">&amp;#34;pytest-subtests&amp;gt;=0.6,&amp;lt;0.7&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install &lt;span style="color:#e6db74">&amp;#34;pytest-cov&amp;gt;=3.0,&amp;lt;3.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>➜ test cat 2.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install &lt;span style="color:#e6db74">&amp;#34;pytest&amp;gt;=7.0,&amp;lt;7.1&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;pytest-mock&amp;gt;=3.7,&amp;lt;3.8&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;pytest-subtests&amp;gt;=0.6,&amp;lt;0.7&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;pytest-cov&amp;gt;=3.0,&amp;lt;3.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Results:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>./1.sh 4.91s user 0.53s system 72% cpu 7.500 total
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./1.sh 4.98s user 0.37s system 75% cpu 7.076 total
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./1.sh 5.06s user 0.49s system 76% cpu 7.278 total
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./2.sh 2.56s user 0.24s system 71% cpu 3.903 total
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./2.sh 3.36s user 0.23s system 79% cpu 4.519 total
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./2.sh 2.64s user 0.27s system 75% cpu 3.872 total
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Results were generated by hand as following:&lt;/p></description></item><item><title>Debugging external python library in VS Code</title><link>https://lstolcman.github.io/post/debugging-python-lib-debugpy/</link><pubDate>Fri, 04 Feb 2022 14:24:00 +0200</pubDate><guid>https://lstolcman.github.io/post/debugging-python-lib-debugpy/</guid><description>&lt;p>Sometimes we would like to know how an external library works, or the documentation is not sufficient to understand its
behavior. &amp;ldquo;The code should be self-explanatory&amp;rdquo; - let&amp;rsquo;s take advantage of it.&lt;/p>
&lt;p>The case is as following - I wanted to use &lt;a href="https://pre-commit.com/">pre-commit&lt;/a> and one of its features is excluding
certain files or folders from linting. I would like to make use of it - specify a list of folders to exclude in nice,
multi-line human-readable format. Unfortunately, the documentation was vague about how it should be formatted exactly.
At this point, my experiments failed. How could I know the proper format?&lt;/p></description></item></channel></rss>